import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.datasets import mnist
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, f1_score, roc_curve, auc
from sklearn.model_selection import train_test_split

# Load MNIST dataset
(X_train_full, y_train_full), (X_test_full, y_test_full) = mnist.load_data()

# Define subset size (reduce from 60,000 → 10,000 for train, 10,000 → 2,000 for test)
train_size = 10000
test_size = 2000

# Flatten images (28x28 → 784) and normalize pixel values (0-1)
X_train_full = X_train_full.reshape(X_train_full.shape[0], -1) / 255.0
X_test_full = X_test_full.reshape(X_test_full.shape[0], -1) / 255.0

# Create smaller dataset by random sampling while maintaining class balance
X_train, _, y_train, _ = train_test_split(X_train_full, y_train_full, train_size=train_size, stratify=y_train_full, random_state=42)
X_test, _, y_test, _ = train_test_split(X_test_full, y_test_full, train_size=test_size, stratify=y_test_full, random_state=42)

# Verify new shapes
print(f"Reduced Training data shape: {X_train.shape}")  # (10000, 784)
print(f"Reduced Test data shape: {X_test.shape}")      # (2000, 784)

# Display some sample images
fig, axes = plt.subplots(1, 5, figsize=(10, 3))
for i, ax in enumerate(axes):
    ax.imshow(X_train[i].reshape(28, 28), cmap='gray')
    ax.set_title(f"Label: {y_train[i]}")
    ax.axis('off')
plt.show()
